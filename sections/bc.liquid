{%- comment -%}
/ sections/box-fitter.liquid
4-step “box builder” wizard with:
• scroll-into-view on navigation  
• clickable stepper (Done locked until all chosen)  
• enhanced Next/Back buttons with icons  
• richer Step 4 summary grouped by step  
{%- endcomment -%}
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
{%- comment -%}
/ sections/box-fitter.liquid
4-step “box builder” wizard with:
• Sticky mobile nav (Next/Back/Checkout) that hides when original buttons are in view  
• Fully responsive, configurable product grid  
• Accent-color setting  
• Animated stepper connectors  
• Enhanced checkout button & price display  
{%- endcomment -%}

<style>
  .box-fitter {
    --accent: {{ section.settings.accent_color }};
    --base-border: #D1D5DB;
    --mobile-cols: {{ section.settings.mobile_columns }};
    --desktop-cols: {{ section.settings.desktop_columns }};
    background: #f9fafb;
    border-radius: 1rem;
  }
  .box-fitter h3 { font-size: 1.25rem; font-weight: 600; }
  .box-fitter h4, .box-fitter h5 { color: #111827; }
  .box-fitter p { color: #4B5563; }

  /* Features: always 4 cols */
  .box-fitter .features {
    display: grid;
    grid-template-columns: repeat(4,1fr);
    gap: .75rem;
  }

  /* Stepper */
  .stepper { display:flex; counter-reset: step; margin-bottom:2rem; }
  .stepper li {
    flex:1; list-style:none; position:relative; text-align:center;
    cursor:pointer;
  }
  .stepper li:before {
    counter-increment: step;
    content:counter(step);
    display:block; margin:0 auto .5rem;
    width:2rem; height:2rem; line-height:2rem;
    border:2px solid var(--base-border);
    border-radius:50%; background:white;
    transition: background .3s, border-color .3s, color .3s;
  }
  .stepper li:after {
    content:''; position:absolute; top:1rem; left:100%;
    width:100%; height:2px; background:var(--base-border);
    transition: background .3s;
  }
  .stepper li:last-child:after { display:none; }
  .stepper li.active:before {
    border-color:var(--accent); background:var(--accent); color:white;
  }
  .stepper li.completed:after {
    background: var(--accent);
    animation: expandLine .4s ease forwards;
  }
  @keyframes expandLine { from{width:0} to{width:100%} }

  /* Product grid */
  .product-grid {
    display:grid; gap:1rem;
    grid-template-columns:repeat(var(--mobile-cols),1fr);
  }
  @media(min-width:640px){
    .product-grid {
      grid-template-columns:repeat(var(--desktop-cols),1fr);
    }
  }

  /* Product cards */
  .product-card {
    background:white; border-radius:.75rem;
    box-shadow:0 1px 3px rgba(0,0,0,.1);
    transition:transform .2s, box-shadow .2s;
  }
  .product-card:hover {
    transform:translateY(-4px);
    box-shadow:0 4px 6px rgba(0,0,0,.1);
  }
  .product-card.selected {
    box-shadow:0 0 0 3px var(--accent);
  }

  /* Buttons */
  .btn {
    display:inline-flex; align-items:center; gap:.5rem;
    font-weight:500; border-radius:.5rem;
    transition:background .2s, transform .1s;
  }
  .btn:disabled {
    opacity:.5; cursor:not-allowed;
  }
  .btn:not(:disabled):hover {
    transform:translateY(-1px);
  }

  /* Sticky mobile nav */
  .sticky-nav {
    position:fixed; bottom:0; left:0; width:100%;
    background:rgba(255,255,255,0.95);
    border-top:1px solid #E5E7EB;
    display:flex; justify-content:space-between;
    padding:.75rem 1rem; z-index:50;
  }
  [x-cloak] { display:none !important; }
</style>

<div
  x-data="boxFitter()"
  class="box-fitter max-w-4xl mx-auto px-4 py-6 sm:px-6 sm:py-8 md:px-8 md:py-10 space-y-8"
>
  <!-- Top icons -->
  <div class="features">
    {% for i in (1..4) %}
      {% assign iconKey  = 'icon'  | append: i %}
      {% assign labelKey = 'icon'  | append: i  | append: '_label' %}
      <div class="bg-white p-3 rounded-xl shadow flex flex-col items-center">
        {% if section.settings[iconKey] %}
          <img src="{{ section.settings[iconKey] | img_url: '48x48' }}" alt="" class="mb-1">
        {% endif %}
        <p class="text-xs font-medium text-center">{{ section.settings[labelKey] }}</p>
      </div>
    {% endfor %}
  </div>

  <!-- Stepper -->
  <ul class="stepper">
    <template x-for="(step, idx) in steps" :key="idx">
      <li
        :class="{'active': idx+1===currentStep, 'completed': idx<currentStep-1}"
        @click="handleStepClick(idx)"
      >
        <span x-text="step"></span>
      </li>
    </template>
  </ul>

  <!-- Content + original nav (tracked by IntersectionObserver) -->
  <div class="space-y-6">
    <!-- Step 1 -->
    <div x-show="currentStep===1" class="space-y-4">
      <div class="product-grid">
        <template x-for="prod in step1Products" :key="prod.id">
          <div
            class="product-card p-3 cursor-pointer"
            :class="{'selected': isSelected(prod.id,1)}"
            @click="toggleSelect(prod,1)"
          >
            <img :src="prod.featured_image" class="mb-1 rounded-md w-full h-24 object-cover">
            <h4 class="text-sm" x-text="prod.title"></h4>
            <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
          </div>
        </template>
      </div>
      <div
        x-intersect:enter="navVisible = true"
        x-intersect:leave="navVisible = false"
        class="flex justify-end space-x-2"
      >
        <button
          class="btn bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-white px-5 py-2"
          :disabled="selectedCount(1)===0"
          @click="nextStep()"
        >
          Next
          <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
               viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Step 2 -->
    <div x-show="currentStep===2" class="space-y-4">
      <div class="product-grid">
        <template x-for="prod in step2Products" :key="prod.id">
          <div
            class="product-card p-3 cursor-pointer"
            :class="{'selected': isSelected(prod.id,2)}"
            @click="toggleSelect(prod,2)"
          >
            <img :src="prod.featured_image" class="mb-1 rounded-md w-full h-24 object-cover">
            <h4 class="text-sm" x-text="prod.title"></h4>
            <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
          </div>
        </template>
      </div>
      <div
        x-intersect:enter="navVisible = true"
        x-intersect:leave="navVisible = false"
        class="flex justify-between"
      >
        <button
          class="btn bg-gray-300 hover:bg-gray-400 focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 text-gray-700 px-4 py-2"
          @click="prevStep()"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
               viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M15 19l-7-7 7-7" />
          </svg>
          Back
        </button>
        <button
          class="btn bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-white px-5 py-2"
          :disabled="selectedCount(2)===0"
          @click="nextStep()"
        >
          Next
          <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
               viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Step 3 -->
    <div x-show="currentStep===3" class="space-y-4">
      <div class="product-grid">
        <template x-for="prod in step3Products" :key="prod.id">
          <div
            class="product-card p-3 cursor-pointer"
            :class="{'selected': isSelected(prod.id,3)}"
            @click="toggleSelect(prod,3)"
          >
            <img :src="prod.featured_image" class="mb-1 rounded-md w-full h-24 object-cover">
            <h4 class="text-sm" x-text="prod.title"></h4>
            <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
          </div>
        </template>
      </div>
      <div
        x-intersect:enter="navVisible = true"
        x-intersect:leave="navVisible = false"
        class="flex justify-between"
      >
        <button
          class="btn bg-gray-300 hover:bg-gray-400 focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 text-gray-700 px-4 py-2"
          @click="prevStep()"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
               viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M15 19l-7-7 7-7" />
          </svg>
          Back
        </button>
        <button
          class="btn bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-white px-5 py-2"
          :disabled="selectedCount(3)===0"
          @click="nextStep()"
        >
          Next
          <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
               viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Step 4: Summary -->
    <div x-show="currentStep===4" class="lg:flex gap-8 space-y-6">
      <div class="lg:w-2/3 space-y-4">
        <h3>Summary</h3>
        {% raw %}
        <template x-if="selectedCount(1)>0">
          <div>
            <h4 class="font-medium mb-2" x-text="steps[0]"></h4>
            <template x-for="prod in selected[1]" :key="prod.id">
              <div class="flex items-center bg-white p-4 rounded-lg shadow mb-2">
                <img :src="prod.featured_image" class="w-16 h-16 rounded-md mr-4 object-cover">
                <div>
                  <h5 x-text="prod.title"></h5>
                  <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
                </div>
              </div>
            </template>
          </div>
        </template>
        <template x-if="selectedCount(2)>0">
          <div>
            <h4 class="font-medium mb-2" x-text="steps[1]"></h4>
            <template x-for="prod in selected[2]" :key="prod.id">
              <div class="flex items-center bg-white p-4 rounded-lg shadow mb-2">
                <img :src="prod.featured_image" class="w-16 h-16 rounded-md mr-4 object-cover">
                <div>
                  <h5 x-text="prod.title"></h5>
                  <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
                </div>
              </div>
            </template>
          </div>
        </template>
        <template x-if="selectedCount(3)>0">
          <div>
            <h4 class="font-medium mb-2" x-text="steps[2]"></h4>
            <template x-for="prod in selected[3]" :key="prod.id">
              <div class="flex items-center bg-white p-4 rounded-lg shadow mb-2">
                <img :src="prod.featured_image" class="w-16 h-16 rounded-md mr-4 object-cover">
                <div>
                  <h5 x-text="prod.title"></h5>
                  <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
                </div>
              </div>
            </template>
          </div>
        </template>
        {% endraw %}
      </div>
      <div class="lg:w-1/3 bg-white p-6 rounded-lg shadow space-y-4">
        <h3>Total</h3>
        <p class="text-2xl font-bold text-gray-900" x-text="formatMoney(totalPrice)"></p>
        <button
          class="btn bg-green-600 hover:bg-green-700 focus:ring-2 focus:ring-offset-2 focus:ring-green-500 text-white w-full py-3 text-center"
          @click="checkout()"
        >
          Checkout
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none"
               viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.2 6M17 13l1.2 6M6 19h12" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Sticky mobile nav -->
  <div
    class="sticky-nav md:hidden"
    x-show="!navVisible"
    x-cloak
  >
    <template x-if="currentStep>1 && currentStep<4">
      <button
        class="btn bg-gray-300 hover:bg-gray-400 focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 text-gray-700 px-4 py-2"
        @click="prevStep()"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
             viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M15 19l-7-7 7-7" />
        </svg>
        Back
      </button>
    </template>
    <template x-if="currentStep<4">
      <button
        class="btn bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-white px-5 py-2"
        :disabled="selectedCount(currentStep)===0"
        @click="nextStep()"
      >
        Next
        <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
             viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </template>
    <template x-if="currentStep===4">
      <button
        class="btn bg-green-600 hover:bg-green-700 focus:ring-2 focus:ring-offset-2 focus:ring-green-500 text-white px-5 py-2 w-full text-center"
        @click="checkout()"
      >
        Checkout — <span x-text="formatMoney(totalPrice)"></span>
      </button>
    </template>
  </div>
</div>

<script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
<script>
  function boxFitter(){
    return {
      currentStep: 1,
      steps: ['Packaging','Gifts','Card','Done'],
      navVisible: false,

      step1Products: {{ collections[section.settings.step1_collection].products | json }},
      step2Products: {{ collections[section.settings.step2_collection].products | json }},
      step3Products: {{ collections[section.settings.step3_collection].products | json }},

      selected: {1: [], 2: [], 3: []},
      mode: {
        1: '{{ section.settings.step1_mode }}',
        2: '{{ section.settings.step2_mode }}',
        3: '{{ section.settings.step3_mode }}'
      },

      toggleSelect(prod, step){
        let arr = this.selected[step];
        let idx = arr.findIndex(p=>p.id===prod.id);
        if(idx>=0) arr.splice(idx,1);
        else {
          if(this.mode[step]==='single') arr.splice(0);
          arr.push(prod);
        }
      },
      isSelected(id,step){
        return this.selected[step].some(p=>p.id===id);
      },
      selectedCount(step){
        return this.selected[step].length;
      },

      canClick(idx){
        if(idx<3) return true;
        return this.selectedCount(1)>0 && this.selectedCount(2)>0 && this.selectedCount(3)>0;
      },
      handleStepClick(idx){
        const s = idx+1;
        if(this.canClick(idx)){
          this.currentStep=s;
          this.scrollToTop();
        }
      },

      nextStep(){
        if(this.currentStep<4){
          this.currentStep++;
          this.scrollToTop();
        }
      },
      prevStep(){
        if(this.currentStep>1){
          this.currentStep--;
          this.scrollToTop();
        }
      },
      scrollToTop(){
        this.$nextTick(()=>{
          document.querySelector('.box-fitter')
                  .scrollIntoView({behavior:'smooth',block:'start'});
        });
      },

      get allSelected(){
        return [...this.selected[1],...this.selected[2],...this.selected[3]];
      },
      get totalPrice(){
        return this.allSelected.reduce((sum,p)=>sum+p.variants[0].price,0);
      },
      formatMoney(cents){
        return new Intl.NumberFormat('{{ shop.locale }}',{
          style:'currency',currency:'{{ shop.currency }}'
        }).format(cents/100);
      },
      checkout(){
        let param=this.allSelected.map(p=>p.variants[0].id+':1').join(',');
        window.location.href=`/cart/${param}?checkout`;
      }
    }
  }
</script>

{% schema %}
{
  "name": "Box Fitter",
  "settings": [
    {
      "type":"color","id":"accent_color","label":"Accent Color","default":"#2563EB"
    },
    {
      "type":"select","id":"mobile_columns","label":"Products per row (mobile)",
      "options":[
        {"value":"1","label":"1"},
        {"value":"2","label":"2"},
        {"value":"3","label":"3"},
        {"value":"4","label":"4"}
      ],
      "default":"2"
    },
    {
      "type":"select","id":"desktop_columns","label":"Products per row (desktop)",
      "options":[
        {"value":"1","label":"1"},
        {"value":"2","label":"2"},
        {"value":"3","label":"3"},
        {"value":"4","label":"4"}
      ],
      "default":"4"
    },

    {"type":"image_picker","id":"icon1","label":"Icon 1"},
    {"type":"text","id":"icon1_label","label":"Icon 1 Label","default":"Fast Shipping"},
    {"type":"image_picker","id":"icon2","label":"Icon 2"},
    {"type":"text","id":"icon2_label","label":"Icon 2 Label","default":"Premium Wrap"},
    {"type":"image_picker","id":"icon3","label":"Icon 3"},
    {"type":"text","id":"icon3_label","label":"Icon 3 Label","default":"Handpicked Gifts"},
    {"type":"image_picker","id":"icon4","label":"Icon 4"},
    {"type":"text","id":"icon4_label","label":"Icon 4 Label","default":"Personal Card"},

    {"type":"collection","id":"step1_collection","label":"Step 1 Collection"},
    {
      "type":"select","id":"step1_mode","label":"Step 1: Single or Multiple?",
      "options":[
        {"value":"single","label":"Single"},
        {"value":"multiple","label":"Multiple"}
      ],
      "default":"single"
    },

    {"type":"collection","id":"step2_collection","label":"Step 2 Collection"},
    {
      "type":"select","id":"step2_mode","label":"Step 2: Single or Multiple?",
      "options":[
        {"value":"single","label":"Single"},
        {"value":"multiple","label":"Multiple"}
      ],
      "default":"multiple"
    },

    {"type":"collection","id":"step3_collection","label":"Step 3 Collection"},
    {
      "type":"select","id":"step3_mode","label":"Step 3: Single or Multiple?",
      "options":[
        {"value":"single","label":"Single"},
        {"value":"multiple","label":"Multiple"}
      ],
      "default":"single"
    }
  ],
  "presets":[{"name":"Box Fitter","category":"Custom"}]
}
{% endschema %}

