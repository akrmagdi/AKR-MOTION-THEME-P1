{%- comment -%}
/ sections/box-fitter.liquid
A 4-step “box builder” wizard: Packaging → Gifts → Card → Done.
Fully Liquid-friendly and enhanced UI.
{%- endcomment -%}
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>

<style>
  /* Container & typography */
  .box-fitter { background: #f9fafb; border-radius: 1rem; }
  .box-fitter h3 { font-size: 1.25rem; font-weight: 600; }
  .box-fitter p, .box-fitter h4 { color: #374151; }

  /* Stepper */
  .stepper { counter-reset: step; margin-bottom: 2rem; }
  .stepper li { list-style: none; position: relative; text-align: center; }
  .stepper li:before {
    counter-increment: step;
    content: counter(step);
    display: block;
    margin: 0 auto .5rem;
    width: 2.5rem; height: 2.5rem; line-height: 2.5rem;
    border: 2px solid #D1D5DB;
    border-radius: 50%;
    background: white;
    transition: all .3s;
  }
  .stepper li + li:after {
    content: '';
    position: absolute; top: 1.25rem; left: -50%;
    width: 100%; height: 2px;
    background: #D1D5DB;
    z-index: -1;
    transition: background .3s;
  }
  .stepper li.active:before {
    border-color: #2563EB;
    background: #2563EB;
    color: white;
  }
  .stepper li.active + li:after {
    background: #2563EB;
  }

  /* Product cards */
  .product-card {
    background: white;
    border-radius: .75rem;
    box-shadow: 0 1px 3px rgba(0,0,0,.1);
    transition: transform .2s, box-shadow .2s;
  }
  .product-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 6px rgba(0,0,0,.1);
  }
  .product-card.selected {
    box-shadow: 0 0 0 3px #2563EB;
  }

  /* Buttons */
  .btn {
    font-weight: 500;
    border-radius: .5rem;
    transition: background .2s, transform .1s;
  }
  .btn:disabled {
    opacity: .5;
    cursor: not-allowed;
  }
  .btn:not(:disabled):hover {
    transform: translateY(-1px);
  }
</style>

<div
  x-data="boxFitter()"
  class="box-fitter max-w-4xl mx-auto p-8 space-y-8"
>
  <!-- Features Row -->
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
    {% for i in (1..4) %}
      {% assign iconKey  = 'icon'  | append: i %}
      {% assign labelKey = 'icon'  | append: i  | append: '_label' %}
      <div class="bg-white p-4 rounded-xl shadow hover:shadow-lg flex flex-col items-center">
        {% if section.settings[iconKey] %}
          <img
            src="{{ section.settings[iconKey] | img_url: '80x80' }}"
            alt=""
            class="mb-2"
          >
        {% endif %}
        <p class="text-sm font-medium">{{ section.settings[labelKey] }}</p>
      </div>
    {% endfor %}
  </div>

  <!-- Progress Stepper -->
  <ul class="stepper flex justify-between">
    <template x-for="(step, idx) in steps" :key="idx">
      <li :class="{ 'active': currentStep-1 >= idx }" class="flex-1">
        <span x-text="step"></span>
      </li>
    </template>
  </ul>

  <!-- Steps Content -->
  <div class="space-y-6">

    <!-- Step 1: Packaging -->
    <div x-show="currentStep===1" class="space-y-4">
      <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
        <template x-for="prod in step1Products" :key="prod.id">
          <div
            class="product-card p-4 cursor-pointer"
            :class="{ 'selected': isSelected(prod.id,1) }"
            @click="toggleSelect(prod,1)"
          >
            <img
              :src="prod.featured_image"
              class="mb-2 rounded-md w-full h-32 object-cover"
            >
            <h4 class="text-sm mb-1" x-text="prod.title"></h4>
            <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
          </div>
        </template>
      </div>
      <button
        class="btn bg-blue-600 text-white px-6 py-2"
        :disabled="selectedCount(1)===0"
        @click="nextStep()"
      >Next</button>
    </div>

    <!-- Step 2: Gifts -->
    <div x-show="currentStep===2" class="space-y-4">
      <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
        <template x-for="prod in step2Products" :key="prod.id">
          <div
            class="product-card p-4 cursor-pointer"
            :class="{ 'selected': isSelected(prod.id,2) }"
            @click="toggleSelect(prod,2)"
          >
            <img
              :src="prod.featured_image"
              class="mb-2 rounded-md w-full h-32 object-cover"
            >
            <h4 class="text-sm mb-1" x-text="prod.title"></h4>
            <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
          </div>
        </template>
      </div>
      <div class="flex justify-between">
        <button class="btn bg-gray-300 px-5 py-2" @click="prevStep()">Back</button>
        <button
          class="btn bg-blue-600 text-white px-6 py-2"
          :disabled="selectedCount(2)===0"
          @click="nextStep()"
        >Next</button>
      </div>
    </div>

    <!-- Step 3: Card -->
    <div x-show="currentStep===3" class="space-y-4">
      <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
        <template x-for="prod in step3Products" :key="prod.id">
          <div
            class="product-card p-4 cursor-pointer"
            :class="{ 'selected': isSelected(prod.id,3) }"
            @click="toggleSelect(prod,3)"
          >
            <img
              :src="prod.featured_image"
              class="mb-2 rounded-md w-full h-32 object-cover"
            >
            <h4 class="text-sm mb-1" x-text="prod.title"></h4>
            <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
          </div>
        </template>
      </div>
      <div class="flex justify-between">
        <button class="btn bg-gray-300 px-5 py-2" @click="prevStep()">Back</button>
        <button
          class="btn bg-blue-600 text-white px-6 py-2"
          :disabled="selectedCount(3)===0"
          @click="nextStep()"
        >Next</button>
      </div>
    </div>

    <!-- Step 4: Summary -->
    <div x-show="currentStep===4" class="lg:flex gap-8">
      <div class="lg:w-2/3 space-y-4">
        <h3>Your Selection</h3>
        <template x-for="prod in allSelected" :key="prod.id">
          <div class="flex items-center bg-white p-4 rounded-lg shadow">
            <img
              :src="prod.featured_image"
              class="w-16 h-16 rounded-md mr-4 object-cover"
            >
            <div>
              <h4 x-text="prod.title"></h4>
              <p class="text-xs" x-text="formatMoney(prod.variants[0].price)"></p>
            </div>
          </div>
        </template>
      </div>
      <div class="lg:w-1/3 bg-white p-6 rounded-lg shadow space-y-4">
        <h3>Total</h3>
        <p class="text-2xl font-semibold" x-text="formatMoney(totalPrice)"></p>
        <button
          class="btn bg-green-600 text-white w-full py-2"
          @click="checkout()"
        >Checkout</button>
      </div>
    </div>

  </div>
</div>

<script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
<script>
  function boxFitter(){
    return {
      currentStep: 1,
      steps: ['Packaging','Gifts','Card','Done'],
      step1Products: {{ collections[section.settings.step1_collection].products | json }},
      step2Products: {{ collections[section.settings.step2_collection].products | json }},
      step3Products: {{ collections[section.settings.step3_collection].products | json }},
      selected: {1: [], 2: [], 3: []},
      mode: {
        1: '{{ section.settings.step1_mode }}',
        2: '{{ section.settings.step2_mode }}',
        3: '{{ section.settings.step3_mode }}'
      },
      toggleSelect(prod, step){
        let arr = this.selected[step];
        let idx = arr.findIndex(p => p.id === prod.id);
        if(idx >= 0) arr.splice(idx, 1);
        else {
          if(this.mode[step] === 'single') arr.splice(0);
          arr.push(prod);
        }
      },
      isSelected(id, step){
        return this.selected[step].some(p => p.id === id);
      },
      selectedCount(step){
        return this.selected[step].length;
      },
      nextStep(){
        if(this.currentStep < 4) this.currentStep++;
      },
      prevStep(){
        if(this.currentStep > 1) this.currentStep--;
      },
      get allSelected(){
        return [...this.selected[1], ...this.selected[2], ...this.selected[3]];
      },
      get totalPrice(){
        return this.allSelected.reduce((sum, p) => sum + p.variants[0].price, 0);
      },
      formatMoney(cents){
        return new Intl.NumberFormat('{{ shop.locale }}', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(cents/100);
      },
      checkout(){
        let param = this.allSelected
          .map(p => p.variants[0].id + ':1')
          .join(',');
        window.location.href = `/cart/${param}?checkout`;
      }
    }
  }
</script>

{% schema %}
{
  "name": "Box Fitter",
  "settings": [
    { "type": "image_picker", "id": "icon1",       "label": "Icon 1" },
    { "type": "text",         "id": "icon1_label", "label": "Icon 1 Label", "default": "Fast Shipping" },
    { "type": "image_picker", "id": "icon2",       "label": "Icon 2" },
    { "type": "text",         "id": "icon2_label", "label": "Icon 2 Label", "default": "Premium Wrap" },
    { "type": "image_picker", "id": "icon3",       "label": "Icon 3" },
    { "type": "text",         "id": "icon3_label", "label": "Icon 3 Label", "default": "Handpicked Gifts" },
    { "type": "image_picker", "id": "icon4",       "label": "Icon 4" },
    { "type": "text",         "id": "icon4_label", "label": "Icon 4 Label", "default": "Personal Card" },

    { "type": "collection", "id": "step1_collection", "label": "Step 1 Collection" },
    { "type": "select",     "id": "step1_mode",       "label": "Step 1: Single or Multiple?",
      "options": [
        { "value": "single",   "label": "Single" },
        { "value": "multiple", "label": "Multiple" }
      ],
      "default": "single"
    },

    { "type": "collection", "id": "step2_collection", "label": "Step 2 Collection" },
    { "type": "select",     "id": "step2_mode",       "label": "Step 2: Single or Multiple?",
      "options": [
        { "value": "single",   "label": "Single" },
        { "value": "multiple", "label": "Multiple" }
      ],
      "default": "multiple"
    },

    { "type": "collection", "id": "step3_collection", "label": "Step 3 Collection" },
    { "type": "select",     "id": "step3_mode",       "label": "Step 3: Single or Multiple?",
      "options": [
        { "value": "single",   "label": "Single" },
        { "value": "multiple", "label": "Multiple" }
      ],
      "default": "single"
    }
  ],
  "presets": [
    { "name": "Box Fitter", "category": "Custom" }
  ]
}
{% endschema %}
